-----------------------------------
-----------------------------------
Curso de API REST con PHP
-----------------------------------
-----------------------------------

Aprende desde configurar tus entornos de desarrollo hasta lograr implementar los servicios REST, como GET, POST, DELETE y PUT, incluyendo autenticación y manejo de errores. Las cuales lo podrás integrar con cualquier framework del lado Frontend.

    Entender los conceptos principales de REST
    Aprender a consumir servicios REST
    Producir servicios REST
    Restringir el acceso a las API Rest
    
 
 
1. Que es una API y para que sirve
------------------------------------

Interfaz de programacion de aplicaciones
  un conjunto de reglas en como dos aplicaciones se comunican entre si
  --> quien inicia la comunicacion
  --> que tipos de mensajes se envian
  --> cuales son las respuestas que se deben de esperar

Herramientas
  --> php
  --> interpreteQué es y cómo funciona el protocolo HTTP
  --> nau.sh
  --> cURL
  --> JQ
  --> navegador
  
 
 2. Qué es y cómo funciona el protocolo HTTP
 --------------------------------------------
 
HTTP (Hypertext Transfer Protocol), en español: Protocolo de Transferencia de Hipertexto, es un protocolo estándar que gestiona la conexión de 
los servidores web con los navegadores.

Qué es HTTP

Es un protocolo de comunicación entre aplicaciones basado en el intercambio de texto. El protocolo HTTP es el que impulsa todo internet. 
Los navegadores web utilizan este protocolo para solicitar páginas web a los servidores. El servidor devuelve todos los datos necesarios en 
código HTML para que puedan mostrarse en el navegador.

Qué es un protocolo

Es conjunto de reglas en las que se van a comunicar dos entidades, en este caso dos computadoras. El modelo TCP/IP nos permite esta comunicación 
entre computadoras.

Como funciona el protocolo HTTP

    El cliente envía una petición, se transmite por internet.
    El servidor recibe la petición y genera una respuesta, la envía.
    El cliente recibe la respuesta (y si estamos en el navegador, interpreta lo recibido).

Ejemplo de protocolo HTTP

Para este ejemplo, vamos a usar la terminal de comandos de tu computador. Si tienes Windows, puedes encontrarla simplemente buscando “CMD” 
en la barra de búsqueda de Windows.

Ya dentro de la terminal, vamos a usar el comando curl:
  --> curl  https://platzi.com

Al ejecutar el comando, estamos enviando una solicitud HTTP al servidor, que nos enviará todo el código HTML del sitio web. Si queremos ver 
solamente los encabezados, usamos el modificador -v
  --> curl https://platzi.com -v 

Utilizamos redireccion (>) para no observar todo el html. Acá tenemos una redirección de salida
  -->curl https://platzi.com -v > /dev/null


--------------------------
Lecturas recomendadas
--------------------------
https://www.ibm.com/support/knowledgecenter/es/ssw_aix_72/com.ibm.aix.networkcomm/tcpip_protocols.htm
https://www.digival.es/blog/que-son-las-dns-y-para-que-sirven/
https://neo.lcc.uma.es/evirtual/cdd/tutorial/aplicacion/http.html
 
 
 
 3. ¿Qué significa REST? y ¿qué es una API RESTful?
 ---------------------------------------------------
 
REST es un acrónimo que significa Representational State Transfer o transferencia de estado representacional en español. 
Le agrega una capa muy delgada de complejidad y abstracción a HTTP. Mientras que HTTP es transferencia de archivos, REST se basa en la 
transferencia de recursos.

Cómo funciona REST

REST es un conjunto de principios que definen la forma en que se deben crear, leer, actualizar y eliminar los datos. Es una arquitectura 
conocida como cliente-servidor, en la que el servidor y el cliente actúan de forma independiente, siempre y cuando la interfaz sea la misma 
al procesar una solicitud y una respuesta, que son los elementos esenciales. El servidor expone la API REST y el cliente hace uso de ella. 

El servidor almacena la información y la pone a disposición del usuario, mientras que el cliente toma la información y la muestra al usuario o 
la utiliza para realizar posteriores peticiones de más información.

REST es muy útil cuando:

    Las interacciones son simples.
    Los recursos de tu hardware son limitados.


Qué es una API RESTful

Una API RESTful es una interfaz que utiliza estos principios para comunicarse hacia y desde un servidor. Está diseñada con los conceptos de REST. 
El principio más importante en las APIs RESTful es el uso de los métodos HTTP:
    GET
    POST
    PUT
    DELETE

Estos métodos son empleados por los clientes para crear, manipular y eliminar datos en los servidores, respectivamente.

Elementos de una API RESTful

    Recurso: todo dentro de una API RESTful debe ser un recurso.
    URI: los recursos en REST siempre se manipulan a partir de la URI, identificadores universales de recursos.
    Acción: todas las peticiones a tu API RESTful deben estar asociadas a uno de los verbos de HTTP: GET para obtener un recurso, POST 
    para escribir un recurso, PUT para modificar un recurso y DELETE para borrarlo.

Qué es una API

La palabra API es un acrónimo que significa Interfaz de Programación de Aplicaciones (Application Programming Interface). 
Es un sistema que funciona como intermediario entre diferentes aplicaciones de software y su función es permitir que estas aplicaciones 
puedan comunicarse entre sí. Cada vez que usas una app como WhatsApp, Instagram o Facebook, estás usando una API sin saberlo.


Observaciones

Algunas Siglas vistas hasta ahora en el curso:
    --> REST ( Representational State Transfer)
    --> HTTP: HyperText Transfer Protocol
    --> URI: Uniform Resource Identifier
    --> URL: Uniform Resource Locator

Diferencias entre REST y RESTful
    --> REST es una arquitectura para aplicaciones en redes (REpresentational State Transfer). 
    --> RESTful por otro lado, son programas (a modo de web service o API), basados en REST. 
        Muchas veces se usan ambos terminos como sinonimos.

Una petición REST completa se basa en:
    --> URL(Dominio, protocolo)
    --> verbo HTTP (GET, PUT, POST, DELETE)

¿Cuándo conviene usar REST?
    --> Interacciones simples (agregar recursos, quitarlos, modificarlos)
    --> Recursos limitados

¿Cuándo NO conviene usar REST?
    --> cuando las interacciones son más complejas, ejemplo cuándo necesitamos que el servidor aporte más lógica.

En que casos SI conviene usar REST:
    --> conviene usarlo cuando las interacciones son simples
    --> donde lo que queremos hacer son las operaciones básicas de crear un recurso, quitar recursos, modificarlos y también cuando 
        los recursos de hardware son limitados, por que como es muy cercano al http no hay más que necesitemos instalar.

cuando NO conviene usar REST:
es cuando las interacciones son un poco más complejas, es decir necesitamos que el servidor aporte más lógica, ejemplo: la validación de algún documento.
 
--> REST permite mandar json, xml, binarios (imágenes, documentos), text, etc. en cambio con SOAP que solo permite la transmisión de datos 
    en formato XML, json es mucho mas liviano y rapido en su procesamiento dado que es interpretado de forma natural por javascript.
    
--> REST como SOAP son bastante capaces de atender grandes volúmenes de información, yo creo hay que analizar que es más conveniente para uno, 
    tanto en tiempo de desarrollo, tecnologías y sobre que dispositivos o tipos de APP se van a consumir, SOAP se utiliza mas en aplicaciones 
    
--------------------------
Lecturas recomendadas
--------------------------
https://es.wikipedia.org/wiki/Simple_Object_Access_Protocol




4. Cómo realizar una petición REST e interpretar sus resultados
------------------------------------------------------------------

Utilizando el comando ‘curl’ dentro de nuestra terminal podemos realizar peticiones a cualquier sitio web, por ejemplo una API como la de xkcd.
    --> curl https://xkcd.com/info.0.json

El anterior comando nos regresa información del API, pero de manera poco legible. para poder verlo de manera más ordenada podemos usar el siguiente comando:
    --> curl https://xkcd.com/info.0.json | jq
    
--> se crea un archivo con extension .php, el nombre del archivo xhcd.php

<?php
    $json = file_get_contents('https://xkcd.com/info.0.json').PHP_EOL;
    $data = json_decode($json,true);
    echo $data['img'].PHP_EOL;
?>

para ejecutarlo escribimos el comando por consola --> php xhcd.php


VERBOS HTTP
    --> GET     (realizar consultas)
                    toda la informacion viaja a travez de la url
    --> POST    (realizar registros)
                    viaja un poco mas oculta, un poco mas segura
    --> PUT     (realizar actualizacion)
    --> DELETE  (realizar eliminacion)
    
    
    
    
5. Exponer datos a través de HTTP GET
------------------------------------------
    
consultar un directorio total de datos usando un parametro de entrada

// Inicio el servidor en la terminal 1
// php -S localhost:8000 server.php

// Terminal 2 ejecutar 
// curl http://localhost:8000 -v
// curl http://localhost:8000/\?resource_type\=books
// curl http://localhost:8000/\?resource_type\=books | jq


ejemplo de la construccion de un archivo server.php creando la logica para crear un servicio para exponer datos GET

--> inicio del archivo

<?php

// Definimos los recursos disponibles
$allowedResourceType = [
    'books',
    'authors',
    'genres',
];

// Validamos que el recurso este disponible
$resourceType = $_GET['resource_type'];

if ( !in_array($resourceType, $allowedResourceType)) {
    die;
}

// Defino los recursos
$books = [
    1 => [
        'titulo' => 'Lo que el viento se llevo',
        'id_autor' => 2,
        'id_genero' => 2,
    ],
    2 => [
        'titulo' => 'La Iliada',
        'id_autor' => 1,
        'id_genero' => 1,
    ],
    3 => [
        'titulo' => 'La Odisea',
        'id_autor' => 1,
        'id_genero' => 1,
    ],
];

// Se indica al cliente que lo que recibirá es un json
header('Content-Type: application/json');

// Generamos la respuesta asumiendo que el pedido es correcto
switch( strtoupper($_SERVER['REQUEST_METHOD'])) {
    case 'GET':
        echo json_encode($books);
        break;
    case 'POST':
        break;
    case 'PUT':
        break;
    case 'DELETE':
        break;
}

?>
--> fin del archivo




6. Exponer un recurso en particular a través de HTTP GET
------------------------------------------












 
